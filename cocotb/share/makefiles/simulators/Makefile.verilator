###############################################################################
# Copyright (c) 2013 Potential Ventures Ltd
# Copyright (c) 2013 SolarFlare Communications Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Potential Ventures Ltd,
#       SolarFlare Communications Inc nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL POTENTIAL VENTURES LTD BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

ifneq ($(VHDL_SOURCES),)

results.xml:
	@echo "Skipping simulation as VHDL is not supported on simulator=$(SIM)"
debug: results.xml
clean::

else

CMD_BIN := verilator

ifdef VERILATOR_BIN_DIR
	CMD := $(shell which $(VERILATOR_BIN_DIR)/$(CMD_BIN) 2>/dev/null)
else
	# auto-detect bin dir from system path
	CMD := $(shell which $(CMD_BIN) 2>/dev/null)
endif

ifeq (, $(CMD))
    $(error "Unable to locate command >$(CMD_BIN)<")
else
	VERILATOR_BIN_DIR := $(shell dirname $(CMD))
	export VERILATOR_BIN_DIR
endif

BUILD_VPI=1

# Compilation phase
$(SIM_BUILD)/verilator_sim: $(SIM_BUILD) $(VERILOG_SOURCES) $(CUSTOM_COMPILE_DEPS)
	$(CMD) --cc -o verilator_sim -Wno-fatal -DCOCOTB_SIM=1 --public --prefix cocotb_top --top-module $(TOPLEVEL) -Mdir $(SIM_BUILD) --vpi  -LDFLAGS "-L$(LIB_DIR) -lvpi" --exe $(COMPILE_ARGS) $(EXTRA_ARGS) $(VERILOG_SOURCES) $(SIM_ROOT)/lib/verilator/verilator_cocotb_main.cpp
	LD_LIBRARY_PATH=$(LIB_DIR):$(LD_LIBRARY_PATH) make -C $(SIM_BUILD) -f cocotb_top.mk OPT=-DVL_DEBUG

# Execution phase
LIB_LOAD := LD_LIBRARY_PATH=$(LIB_DIR):$(LD_LIBRARY_PATH)
NEW_PYTHONPATH := $(PYTHONPATH)

results.xml: $(SIM_BUILD)/verilator_sim $(CUSTOM_SIM_DEPS) $(COCOTB_LIBS) $(COCOTB_VPI_LIB)
	PYTHONPATH=$(LIB_DIR):$(SIM_ROOT):$(PWD):$(NEW_PYTHONPATH) $(LIB_LOAD) MODULE=$(MODULE) \
	TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) TOPLEVEL_LANG=$(TOPLEVEL_LANG) \
	$(SIM_BUILD)/verilator_sim $(SIM_ARGS) $(EXTRA_ARGS) $(PLUSARGS)

debug: $(SIM_BUILD)/verilator_sim $(CUSTOM_SIM_DEPS) $(COCOTB_LIBS)
	PYTHONPATH=$(LIB_DIR):$(SIM_ROOT):$(PWD):$(NEW_PYTHONPATH) $(LIB_LOAD) MODULE=$(MODULE) \
	TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) TOPLEVEL_LANG=$(TOPLEVEL_LANG) \
	gdb --args $(SIM_BUILD)/verilator_sim $(SIM_ARGS) $(EXTRA_ARGS) $(PLUSARGS)

clean::
	-@rm -rf $(SIM_BUILD)
endif
